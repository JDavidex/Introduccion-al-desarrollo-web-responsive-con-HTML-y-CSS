/*-----------------------------------------------------------------------
              _
             /_\
             )_(
             |=|
             |=|
       ______|=|___________
      |  ____|=|_____     /
      | /    |=|    /    /       THE LEGEND OF
      |/ ____|_|__ / /  / _________ ______     _________       _____   TM
         \_______ / // / \    ___  |\    /     \    __  \      \    \
            | = |/ // /   |  |   \ | |  |       |  |  \  \     /  _  \
            |/V\/ // /    |  |    \| |  |       |  |   \  \   /  / \  \
            | |/  / /     |  |       |  |       |  |    \  | /  /   \  \
           /| / /| /      |  |___/|  |  |       |  |     | | |  |   |  |
          /_|/ // /       |   ___ |  |  |       |  |     | | |  |___|  |
         /\ / |/ //\      |  |   \|  |  |       |  |     | | |   ___   |
        /  / /  //  \     |  |       |  |       |  |    /  | |  |   |  |
       /  / // /|    \    |  |    /| |  |    /| |  |   /  /  |  |   |  |
      /__/ // / |_____\   |  |___/ | |  |___/ | |  |__/  /   |  |   |  |
        / // /| |        /_________|/_________|/________/   /____\ /____\
       /  / / | |       /|
      /    /| | |______/ |
     /______| | |________|
            | | |
            | | |
            | | |
            | | |
            | | |
             \|/
              V
*
* Template name : Café Oslo
* Version       : 1.0
* Author        : L-1 DIGITAL STUDIO
* Author URL    : https://l1ds.co/
*
-----------------------------------------------------------------------*/

* {
    box-sizing: border-box;
}

body {
    font-family: 'Open Sans', sans-serif;
    color: #3c3c3b;
    font-size: 16px;
    margin: 0;
}

header {
    height: calc(100vh);
    /* La altura del <nav> se ajusta a la altura de la ventana */
    background-image: url(../images/bg/Fondo-01.jpg);
    background-size: cover;
    background-position: center;
    /* En este ejemplo, se utiliza la propiedad CSS "height" para establecer la altura del elemento <nav>. El valor "100vh" representa el 100% de la altura
    de la ventana del navegador, y se le puede restar 100px para dejar espacio para otros elementos como encabezado y pie de página. */
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    /* En este ejemplo, se utiliza la propiedad CSS "display" con el valor "flex" para convertir el <header> en un contenedor flexible.
    Además, se establece la dirección principal del flexbox como "column" con "flex-direction" para apilar verticalmente los elementos dentro del <header>.
    
    Luego, se utiliza "align-items" con el valor "center" para centrar verticalmente los elementos y "text-align" con el valor "center" para centrar el texto
    en el eje horizontal dentro del <header>.
    
    De esta manera, los elementos h1 y p se centrarán tanto vertical como horizontalmente en el <header>, mientras que el contenido del menú de navegación se
    mantendrá en la parte superior de la página. */
}

.hero img {
    float: left;
    margin: 20px;
    /* Con este cambio, la imagen se posicionará a la izquierda del todo utilizando float: left;, mientras que el menú de navegación se posicionará a la derecha
     utilizando float: right;. Los otros elementos del encabezado no se verán afectados y se mantendrán en su posición original. */
}

nav {
    float: right;
}

/* Menú Hamburguesa */

.hamburger-menu {
    position: absolute;
    top: 20px;
    right: 20px;
    width: 40px;
    height: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    background-color: #d03b40;
}

.line {
    width: 50%;
    height: 3px;
    background-color: #ded6c0;
    margin-bottom: 4px;
}

.line:last-child {
    margin-bottom: 0px;
}

.hamburger-menu {
    display: none;
}

.hero {
    width: 100%;
}

/*  (float: left; o float: right;) Los elementos con esta propiedad dejan de provocar un salto de línea y se sitúan uno al lado del otro, en este caso, hacia la
    izquierda o hacia la derecha. Los elementos que no flotan entran en conflicto con los que sí, por lo que siempre es interesante meter los elementos que flotan
    dentro de un contenedor ue a su vez limpie los floats.

    La forma más sencilla de “limpiar” los floats es que el div contenedor de los elementos que flotan tenga la propiedad (overflow:hidden;)
    Sin embargo, un overflow:hidden; puede dar problemas si luego queremos posicionar elementos fuera del contenedor con position:absolute.
    Si este fuera el caso, lo mejor es añadir la clase “clearfix” al elemento contenedor y colocar lo siguiente: */
.clearfix:before,
.clearfix:after {
    content: " ";
    display: table;
    clear: both;
    /* Este método utiliza un par de técnicas CSS avanzadas para limpiar los floats sin necesidad de overflow:hidden; */
}

li {
    display: inline-block;
    margin: 20px 30px 20px 0;
}

li a {
    color: #f5f0ed;
    font-weight: 800;
    text-decoration: none;
}

h1 {
    font-size: 44px;
    line-height: 43px;
    color: #f5f0ed;
    padding: 150px 0 0 0;
}

h2 {
    font-size: 28px;
    line-height: 30px;
}

h3 {
    font-size: 24px;
}

hr {
    width: 100px;
    /* Tamaño de la línea separadora */
    background-color: #f5f0ed;
    /* Color de la línea separadora */
    margin: 25px 0;
    /* Margen superior e inferior del separador */
    /* En este caso, hemos utilizado la etiqueta <hr> para crear el separador. Luego, en CSS, hemos establecido el tamaño y el color de la línea mediante
    las propiedades width y background-color, respectivamente. También se ha añadido un margen superior e inferior para ajustar el espaciado alrededor del
    separador. */
}

header p {
    line-height: 22px;
    color: #f5f0ed;
    max-width: 580px;
    padding: 0 30px;
    text-align: center;
}

.block {
    display: flex;
    align-items: center;
    text-align: center;
    width: 50%;
    float: left;
}

.red-beige {
    line-height: 22px;
    width: 100%;
    height: 400px;
    padding: 100px;
    background-color: #d03b40;
    color: #ded6c0;
    overflow: hidden;
}

.red-beige a {
    color: #ded6c0;
    text-decoration: none;
    font-weight: bold;
}

.beige-red {
    line-height: 22px;
    width: 100%;
    height: 400px;
    padding: 100px;
    background-color: #ded6c0;
    color: #d03b40;
    overflow: hidden;
}

.beige-red a {
    color: #d03b40;
    text-decoration: none;
    font-weight: bold;
}

.red-beige p,
.beige-red p {
    text-align: center;
}

.slide {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    width: 100%;
    padding: 150px 0px;
    background-image: url(../images/bg/Fondo-02.jpg);
    background-size: cover;
}

.slide h2 {
    font-size: 44px;
    color: #f5f0ed;
}

.slide p {
    color: #f5f0ed;
    max-width: 520px;
    text-align: center;
}

.slide a {
    color: #f5f0ed;
    text-decoration: none;
    margin: 40px 25px;
    padding: 14px;
    border: 3px solid #f5f0ed;
}

/* CSS Grid */

.container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
    margin: 50px 0;
}

.column {
    display: grid;
    grid-template-columns: auto 1fr;
    grid-gap: 10px;
    margin: 50px 20px;
}

.column img {
    max-width: 100%;
    height: auto;
    align-self: center;
}

/* En este ejemplo, hemos envuelto los divs en un contenedor con la clase "container" para aplicar la cuadrícula. El contenedor se divide en dos columnas
    de igual tamaño utilizando "grid-template-columns: repeat(2, 1fr)". Dentro de cada columna, utilizamos otro div con la clase "column" para mantener la
    imagen y el texto juntos. La cuadrícula de la columna se establece con "grid-template-columns: auto 1fr", lo que coloca la imagen a la izquierda y el
    contenido de texto a la derecha. El "grid-gap" se utiliza para agregar espacio entre las columnas y los elementos dentro de ellas.
    
    El resultado será dos columnas de igual tamaño, donde la imagen estará a la izquierda y el texto estará a la derecha. */

.column p {
    color: #241d1b;
}

.column h3,
p {
    margin: 0px 20px;
}

footer {
    padding: 50px 20px;
    background-color: #251d1b;
    color: #f5f0ed;
    text-align: center;
}

/* Responsive */

@media screen and (max-width: 768px) {

    .red-beige,
    .beige-red {
        padding: 100px 50px;
    }

    .hero img {
        float: none;
    }

    nav {
        float: none;
    }

    .container {
        grid-template-columns: 1fr;
    }

    .column h3 {
        padding: 30px;
    }

    .column h3,
    p {
        text-align: center;
        margin: 0;
    }

    .column {
        grid-template-columns: 1fr;
        /* Cambiamos a una sola columna */
        grid-template-rows: auto auto;
        /* Agregamos filas para alinear el logo y el texto */
        justify-items: center;
        /* Alineamos horizontalmente al centro */
    }

    .column img {
        align-self: center;
        /* Alineamos verticalmente al centro */
        grid-row: 1;
        /* Colocamos la imagen en la primera fila */
    }

    .column div {
        grid-row: 2;
        /* Colocamos el texto en la segunda fila */
    }
}

@media screen and (max-width: 616px) {
    .block {
        width: 100%;
    }

    .red-beige,
    .beige-red {
        padding: 100px 40px;
    }

    h1 {
        font-size: 30px;
        padding: 100px 0 0 0;
    }

    hr {
        width: 90px;
    }

    h2 {
        font-size: 24px;
    }

    nav {
        display: none;
    }

    .hero img {
        float: left;
    }

    .column h3 {
        padding: 0;
    }

    .column h3,
    p {
        text-align: center;
    }

    .slide h2 {
        font-size: 30px;
    }

    .slide p {
        padding: 0 30px;
    }

    .hamburger-menu {
        display: flex;
    }

    footer {
        padding: 20px 20px;
    }
}